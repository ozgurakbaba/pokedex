{"version":3,"sources":["api/utils.js","components/PokedexNav/index.jsx","components/PokedexCard/index.jsx","components/PokedexSelector/index.jsx","components/PokedexDeck/index.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["POKEAPI_LIST_URL","getPokemonList","a","fetch","then","res","json","data","results","getPokemonDescriptionByPID","pid","flavor_text_entries","flavor_text","replace","getPokemonSpriteUrlByPID","PokedexNav","prev","next","className","type","title","onClick","PokedexCard","pokemon","useState","pokemonId","setPokemonId","description","setDescription","spriteUrl","setSpriteUrl","getPokemonDetailsFromAPI","useEffect","substring","indexOf","length","src","alt","width","height","charAt","toUpperCase","Number","console","log","PokedexSelector","setPokemon","onChange","e","target","value","map","opt","i","key","name","PokedexDeck","App","pokemons","setPokemons","getPokemonListFromAPI","sort","pk","npk","localeCompare","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d3fce8b.chunk.js","sourcesContent":["const POKEAPI_LIST_URL = \"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=150\";\nconst POKEAPI_DESCRIPTION_RAW_URL = \"https://pokeapi.co/api/v2/pokemon-species/\";\nconst POKEAPI_DESCRIPTION_URL = \"https://pokeapi.co/api/v2/pokemon-species/1\";\nconst POKEAPI_SPRITES_RAW_URL = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\";\nconst POKEAPI_SPRITES_URL = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\";\n\nexport async function getPokemonList() {\n    const data = await fetch(POKEAPI_LIST_URL).then((res) => res.json());\n    if (data) return data.results;\n}\n\nexport async function getPokemonDescription() {\n    const data = await fetch(POKEAPI_DESCRIPTION_URL).then((res) => res.json());\n    if (data) return data.flavor_text_entries[0].flavor_text.replace(/[\\n\\f]/g, \" \");\n}\n\nexport async function getPokemonDescriptionByPID(pid) {\n    const data = await fetch(`${POKEAPI_DESCRIPTION_RAW_URL}${pid}`).then((res) => res.json());\n    if (data) return data.flavor_text_entries[0].flavor_text.replace(/[\\n\\f]/g, \" \");\n}\n\nexport function getPokemonSpriteUrl() {\n    return POKEAPI_SPRITES_URL;\n}\n\nexport function getPokemonSpriteUrlByPID(pid) {\n    return `${POKEAPI_SPRITES_RAW_URL}${pid}.png`;\n}","import React from 'react'\n\nexport default function PokedexNav ({ pid, prev, next }) {\n    // console.log(pid);   // -- testing\n    return (\n        <div className=\"navigation\">\n            <button type=\"button\" title=\"Prev\" onClick={prev}>Prev</button>\n            <button type=\"button\" title=\"Next\" onClick={next}>Next</button>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { getPokemonDescriptionByPID, getPokemonSpriteUrlByPID } from '../../api/utils';\n\nimport PokedexNav from \"../PokedexNav\";\n\nexport default function PokedexCard({ pokemon }) {\n    // console.log(pokemon);     // -- testing\n    const [pokemonId, setPokemonId] = useState(1);\n    const [description, setDescription] = useState(\"\");\n    const [spriteUrl, setSpriteUrl] = useState(\"\");\n\n    const prevPokemonId = () => {\n        setPokemonId(Number(pokemonId)-1);\n        getPokemonDetailsFromAPI();\n        console.log(\"<< prev\", pokemonId);\n    }\n\n    const nextPokemonId = () => {\n        setPokemonId(Number(pokemonId)+1);\n        getPokemonDetailsFromAPI();\n        console.log(\"next >>\", pokemonId);\n    }\n\n    async function getPokemonDetailsFromAPI() {\n        await getPokemonDescriptionByPID(pokemonId).then((data) => setDescription(data));\n        setSpriteUrl(getPokemonSpriteUrlByPID(pokemonId));\n    }\n    \n    useEffect(() => {\n        getPokemonDetailsFromAPI();\n        setPokemonId(pokemon.substring(pokemon.indexOf(\"-\")+1, pokemon.length));\n    }, [pokemon]);\n\n    return (\n        <>\n        <div className=\"card\">\n            <img src={ spriteUrl } alt=\"Pokemon Name\" title=\"Pokemon Name\" width=\"200\" height=\"200\" />\n            <h1>{ pokemon.charAt(0).toUpperCase() + pokemon.substring(1, pokemon.indexOf(\"-\")) }</h1>\n            <p>{ description }</p>\n        </div>\n        <PokedexNav pid={ pokemonId } prev={ prevPokemonId } next={ nextPokemonId } />\n        </>\n    );\n    \n};","import React, { useState } from 'react'\n\nimport PokedexCard from \"../PokedexCard\";\n\nexport default function PokedexSelector ({ data }) {\n    // console.log(data);\n    const [pokemon, setPokemon] = useState(\"Bulbasaur-1\");\n\n    return (\n        <>\n        <select onChange={(e) => setPokemon(e.target.value)}>\n            {data && data.map((opt, i) => {\n                return <option key={i} value={opt.name + \"-\" + i} >{opt.name.toUpperCase()}</option>\n            })}\n        </select>\n        <PokedexCard pokemon={ pokemon } />\n        </>\n    );\n}","import React from 'react'\nimport PokedexSelector from \"../PokedexSelector\";\n\nexport default function PokedexDeck({ data }) {\n    // console.log(data.list);  // -- testing\n    return (\n        <div className=\"pokedex-container\">\n            <div className=\"pokedex\">\n                <PokedexSelector data={ data } />\n            </div>\n        </div>\n    );\n};","import React, { useState, useEffect } from 'react'\nimport { getPokemonList } from './api/utils'\n\nimport PokedexDeck from './components/PokedexDeck';\n\nfunction App() {\n  const [pokemons, setPokemons] = useState([]);\n  \n  async function getPokemonListFromAPI() {\n    await getPokemonList().then((data) => setPokemons(data));\n  }\n\n  useEffect(() => {\n    getPokemonListFromAPI();\n  }, []);\n\n  // console.log(pokemons);  // -- testing\n\n  return (\n    <div className=\"app-container\">\n      <PokedexDeck data={ pokemons.sort((pk, npk) => pk.name.localeCompare(npk.name)) } />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister();\nreportWebVitals();"],"sourceRoot":""}